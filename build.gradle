buildscript {
    repositories {
	jcenter() 
	mavenLocal()
        mavenCentral()
	maven {
	    url 'https://plugins.gradle.org/m2/'
	}
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.2.0'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.0'
    	classpath 'gradle.plugin.de.fuerstenau:BuildConfigPlugin:1.1.8'
    }
}

apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'
apply plugin: 'com.google.protobuf'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'de.fuerstenau.buildconfig'

jar {
	baseName "corefabric.io"
}

version = '0.2.1-autoconf' // our version
vertxVersion = '3.8.4' // vert.x version

sourceCompatibility = '1.13'
targetCompatibility = '1.13'

buildConfig {
	sourceSets {
		main {
			packageName = 'org.kritikal.fabric.core'
			appName = 'corefabric: compute platform services'
			version = version
		}
	}
    buildConfigField 'long', 'BUILD_UNIXTIME', System.currentTimeMillis() + 'L'
}

sourceSets {
    contrib
    main
}

if (!JavaVersion.current().java8Compatible) {
    throw new IllegalStateException('''A Haiku:
                                      |  This needs Java 8,
                                      |  You are using something else,
                                      |  Refresh. Try again.'''.stripMargin())
}

repositories {
    mavenCentral()
    maven {
        url = 'http://oss.sonatype.org/content/repositories/snapshots/'
    }
}

protobuf {
    protoc { path = '.local/bin/protoc' }
    generatedFilesBaseDir = "$projectDir/.generated"
}

dependencies {

    contribCompile "io.vertx:vertx-core:$vertxVersion"
    contribCompile group: 'org.postgresql', name: 'postgresql', version: '42.2.9'
    contribCompile group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.7.0'
    contribCompile fileTree(include: ['*.jar'], dir: 'lib')
    compile fileTree(include: ['*.jar'], dir: 'lib')

    compile sourceSets.contrib.output

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'

    compile "io.vertx:vertx-shell:$vertxVersion"
    compile "io.vertx:vertx-hazelcast:$vertxVersion"
    compile "io.vertx:vertx-web:$vertxVersion"
    compile "io.vertx:vertx-unit:$vertxVersion"
    compile "io.vertx:vertx-dropwizard-metrics:$vertxVersion"
    compile "io.vertx:vertx-auth-oauth2:$vertxVersion"

    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.9'
    compile group: 'com.datastax.cassandra', name: 'cassandra-driver-core', version: '2.1.10.3'
    compile group: 'com.datastax.cassandra', name: 'cassandra-driver-mapping', version: '2.1.10.3'
    compile group: 'org.apache.commons', name: 'commons-dbcp2', version: '2.7.0'
    compile group: 'com.google.guava', name: 'guava', version: '28.2-jre';
    compile group: 'com.google.protobuf', name: 'protobuf-java', version: '3.0.0+'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.13'
    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile "io.hawt:hawtio-plugin-mbean:1.5-SNAPSHOT"
    compile "javax.servlet:servlet-api:2.5"
    compile group: 'org.reflections', name: 'reflections', version: '0.9.12'
    compile group: 'net.sf.saxon', name: 'Saxon-HE', version: '9.9.1-6'
}

mainClassName = 'org.kritikal.fabric.CoreFabric'
applicationDefaultJvmArgs = []

shadowJar {
    baseName "corefabric.io"
    classifier = 'fat'
    manifest {
        attributes 'Main-Class': 'org.kritikal.fabric.CoreFabric'
        attributes 'Main-Verticle': 'io.corefabric.pi.MainVerticle'
    }
    mergeServiceFiles {
        include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.12'
}

task cpa2(type: Copy) {
    from 'a2/dist/a2'
    into 'build/resources/main/web/a2'
}

shadowJar.dependsOn 'cpa2'

test {

    jvmArgs = []

    scanForTestClasses = true;

    // listen to events in the test execution lifecycle
    beforeTest { descriptor ->
        logger.lifecycle(''+descriptor)
    }
}

run {
    args = ['run', 'io.corefabric.pi.MainVerticle']
}

task packageTests(type: Jar) {
	manifest {
		attributes	'Main-Class': 'org.junit.runner.JUnitCore'
	}
	dependsOn testClasses
	from sourceSets.test.output
	classifier 'tests'
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	from { configurations.testCompile.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar
}
