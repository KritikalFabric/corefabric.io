/**
Copyright (c) 2010, Cisco Systems, Inc.
All rights reserved.

Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above copyright notice,
    this list of conditions and the following disclaimer in the documentation
    and/or other materials provided with the distribution.

    * Neither the name of the Cisco Systems, Inc. nor the names of its
    contributors may be used to endorse or promote products derived from this
    software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
package com.cisco.qte.jdtn.ltp;

import java.util.Random;
import com.cisco.qte.jdtn.general.DecodeState;
import com.cisco.qte.jdtn.general.EncodeState;
import com.cisco.qte.jdtn.general.JDtnException;
import com.cisco.qte.jdtn.general.Utils;

/**
 * Abstract superclass for all SerialNumbers; entities which satisfy the following:
 * <ul>
 *   <li> Encapsulates an array of bytes
 *   <li> In some cases, must be initialized randomly.
 *   <li> When we generate a SerialNumber, we generate it as a 32-bit (one int)
 *        array of bytes.
 *   <li> When we are parsing SerialNumbers generated by others, we must be
 *        prepared to accept an arbitry array of bytes.
 *   <li> In some cases, for both internally and externally generated SerialNumbers,
 *        we want to increment the SerialNumber by 1.
 *   <li> In some cases, for internally generated SerialNumbers, we want to set
 *        a SerialNumber of 0.
 * </ul>
 */
public abstract class SerialNumber {

	/**
	 * The bytes comprising the serial number
	 */
	protected byte[] snBytes;

	// Random number generator for generating random CheckpointSerialNumber
	private static Random _rng = new Random();
	
	/**
	 * Constructor: sets random serial number
	 * 9.3.  Implementation Considerations
	 * Randomness
	 *     Various fields in LTP (e.g., serial numbers) MUST be initialized
	 *     using random values.  Good sources of randomness that are not
	 *     easily guessable SHOULD be used [ESC05].  The collision of random
	 *     values is subject to the birthday paradox, which means that a
	 *     collision is likely after roughly the square root of the space has
	 *     been seen (e.g., 2^16 in the case of a 32-bit random value).
	 *     Implementers MUST ensure that they use sufficiently long random
	 *     values so that the birthday paradox doesn't cause a problem in
	 *     their environment.
	 */
	public SerialNumber() {
		setBytes(generateRandomSerialNumberBytes());
	}
	
	/**
	 * Constructor: sets byte array to bytes of given int
	 * @param intVal Given int
	 */
	public SerialNumber(int intVal) {
		setBytes(Utils.intToByteArray(intVal));
	}
	
	/**
	 * Constructor: sets serial number to given byte array
	 * @param bytes Given byte array
	 */
	public SerialNumber(byte[] bytes) {
		setBytes(bytes);
	}
	
	/**
	 * Constructor: sets serial number to that of given SerialNumber
	 * @param checkpointSerialNumber Given SerialNumber
	 */
	public SerialNumber(SerialNumber checkpointSerialNumber) {
		setBytes(checkpointSerialNumber.snBytes);
	}
	
	/**
	 * Constructor: sets serial number by decoding given DecodeState
	 * @param decodeState Contains buffer, offset, and length of decode. After
	 * this operation, offset is updated.
	 * @throws JDtnException On decode error
	 */
	public SerialNumber(DecodeState decodeState) throws JDtnException {
		setBytes(Utils.sdnvDecodeBytes(decodeState));
	}
	
	/**
	 * Internal method to generate random bytes of the SerialNumber
	 * @return byte array containing random bytes
	 */
	private byte[] generateRandomSerialNumberBytes() {
		int ranInt = _rng.nextInt();
		if (ranInt == 0) {
			ranInt = _rng.nextInt();
		}
		return Utils.intToByteArray(ranInt);
	}
	
	/**
	 * Increment this serial number by one
	 */
	public void incrementSerialNumber() {
		int carry = 1;
		for (int ix = snBytes.length - 1; ix > 0; ix--) {
			int bite = Utils.byteToIntUnsigned(snBytes[ix]);
			bite += carry;
			snBytes[ix] = Utils.intToByteUnsigned(bite & 0xff);
			carry = (bite >> 8) & 0xff;
		}		
	}
	
	/**
	 * Decrement this serial number by one
	 */
	public void decrementSerialNumber() {
		int borrow = 1;
		for (int ix = 0; ix < snBytes.length; ix++) {
			int bite = Utils.byteToIntUnsigned(snBytes[ix]);
			bite -= borrow;
			snBytes[ix] = Utils.intToByteUnsigned(bite & 0xff);
			borrow = bite >> 8;
		}
	}
	
	/**
	 * Encode this SerialNumber into given buffer
	 * @param encodeState Given buffer
	 * @throws JDtnException on encoding errors
	 */
	public void encode(EncodeState encodeState) throws JDtnException {
		Utils.sdnvEncodeBytes(snBytes, encodeState);
	}
	
	public byte[] getBytes() {
		return snBytes;
	}

	/**
	 * Set the bytes of this SerialNumber.  Copies given array of bytes.
	 * @param sourceBytes Given array of bytes
	 */
	public void setBytes(byte[] sourceBytes) {
		int length = sourceBytes.length;
		snBytes = new byte[length];
		for (int ix = 0; ix < length; ix++) {
			snBytes[ix] = sourceBytes[ix];
		}
	}
	
	/**
	 * Determine if the bytes of this SerialNumber are all zero.
	 * @return true if so
	 */
	public boolean isZero() {
		if (snBytes == null) {
			return true;
		}
		for (int ix = 0; ix < snBytes.length; ix++) {
			if (snBytes[ix] != 0) {
				return false;
			}
		}
		return true;
	}
	
	@Override
	public String toString() {
		return Utils.dumpBytes(snBytes, 0, snBytes.length, false);
	}
	
	/**
	 * Dump the state of this object
	 * @param indent Amount of indentation
	 * @param detailed True if want verbose details
	 * @return String containing dump
	 */
	public String dump(String indent, boolean detailed) {
		StringBuffer sb = new StringBuffer(indent + "SerialNumber\n");
		sb.append(Utils.dumpBytes(indent + "  ", snBytes, 0, snBytes.length));
		return sb.toString();
	}
	
	@Override
	public boolean equals(Object thatObj) {
		if (thatObj == null || !(thatObj instanceof SerialNumber)) {
			return false;
		}
		
		SerialNumber that = (SerialNumber)thatObj;
		return Utils.compareSdnvDecodedArrays(snBytes, that.snBytes);
	}
	
	@Override
	public int hashCode() {
		return Utils.sdnvDecodedArrayHashCode(snBytes);
	}
	
}
